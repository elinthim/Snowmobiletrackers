@*@page "/MapsGoogle"
@attribute [StreamRendering]

@using System.Device.Location
@using System.Net.Http
@using Newtonsoft.Json.Linq

<PageTitle>Snowmobiling Guide</PageTitle>

<h1>Snowmobiling Guide</h1>

<div id="map" style="height: 400px;"></div>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temperature (C)</th>
                <th>Temperature (F)</th>
                <th>Snow Conditions</th>
                <th>Snow Depth (cm)</th>
                <th>Wind Speed (m/s)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.SnowConditions</td>
                    <td>@forecast.SnowDepth</td>
                    <td>@forecast.WindSpeed</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private SnowmobilingForecast[]? forecasts;
    private GeoCoordinate? userLocation;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        // Here you would call the weather API to get detailed forecasts
        // Replace the following mock data with actual data retrieved from the API
        forecasts = Enumerable.Range(1, 5).Select(index => new SnowmobilingForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 5),
                SnowConditions = "Packed Powder", // Mock data
                SnowDepth = Random.Shared.Next(5, 100), // Mock data
                WindSpeed = Random.Shared.Next(0, 20) // Mock data
            }).ToArray();

        // Get user's location using browser's geolocation API
        userLocation = await GetUserLocation();
        if (userLocation != null)
        {
            InitializeMap(userLocation.Value);
        }
    }

    private async Task<GeoCoordinate?> GetUserLocation()
    {
        try
        {
            var position = await JSRuntime.InvokeAsync<GeoCoordinate?>("getUserLocation");
            return position;
        }
        catch (Exception ex)
        {
            // Handle error getting user location
            Console.WriteLine($"Error getting user location: {ex.Message}");
            return null;
        }
    }

    private void InitializeMap(GeoCoordinate userLocation)
    {
        // Initialize map centered at user's location
        var map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: userLocation.Latitude, lng: userLocation.Longitude },
        zoom: 10
        });

    // You can add markers for snowmobile trails or any other points of interest
    // Example:
    var marker = new google.maps.Marker({
        position: { lat: userLocation.Latitude, lng: userLocation.Longitude },
        map: map,
        title: "You are here"
    });
    }

    private class SnowmobilingForecast
{
    public DateOnly Date { get; set; }
    public int TemperatureC { get; set; }
    public string? SnowConditions { get; set; }
    public int SnowDepth { get; set; }
    public int WindSpeed { get; set; }
    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
}
} 



@* @page "/snowmobiling"

<PageTitle>Snowmobiling Guide</PageTitle>

<h1>Snowmobiling Guide</h1>

<div id="map" style="height: 400px;"></div>

@code {
    private dynamic map;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            InitializeMap();
        }
    }

    private void InitializeMap()
    {
        // Include Leaflet JavaScript and CSS files
        JSRuntime.InvokeVoidAsync("loadLeaflet");

        // Define a script block to execute after Leaflet is loaded
        JSRuntime.InvokeVoidAsync("eval", @"
            function initializeMap() {
                // Initialize map centered at a default location
                map = L.map('map').setView([59.3293, 18.0686], 5);

                // Add tile layer
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href=""https://www.openstreetmap.org/copyright"">OpenStreetMap</a> contributors'
                }).addTo(map);
            }

            // Call initializeMap function when Leaflet is loaded
            document.addEventListener('leafletLoaded', function () {
                initializeMap();
            });
        ");
    }
} *@

   
