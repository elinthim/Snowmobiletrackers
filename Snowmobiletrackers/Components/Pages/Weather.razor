@page "/weather"
@attribute [StreamRendering]

<PageTitle>Snowmobiling Weather</PageTitle>

@* <h1>Snowmobiling Weather</h1>

<p>This page displays weather forecasts tailored for snowmobilers.</p> *@

<div class="container">
    <h1 class="text-center mt-5 mb-4">Snowmobiling Weather</h1>

    <p class="lead text-center">This page displays weather forecasts tailored for snowmobilers.</p>

    @if (forecasts == null)
    {
        <div class="text-center">
            <em>Loading...</em>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>Date</th>
                        <th>Temperature (C)</th>
                        <th>Temperature (F)</th>
                        <th>Snow Conditions</th>
                        <th>Snow Depth (cm)</th>
                        <th>Wind Speed (m/s)</th>
                        <th>Name</th>
                        <th>Snowmobile Model</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts)
                    {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.SnowConditions</td>
                            <td>@forecast.SnowDepth</td>
                            <td>@forecast.WindSpeed</td>
                            <td>@forecast.Name</td>
                            <td>@forecast.SnowmobileModel</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>


@code {
    private SnowmobilingForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var snowConditions = new[] { "Fresh Powder", "Packed Powder", "Powder Over Packed", "Icy", "Slushy", "No Snow" };
        var snowmobileModels = new[] { "Polaris", "Ski-Doo", "Arctic Cat", "Yamaha" };

        forecasts = Enumerable.Range(1, 5).Select(index => new SnowmobilingForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 5),
                SnowConditions = snowConditions[Random.Shared.Next(snowConditions.Length)],
                SnowDepth = Random.Shared.Next(5, 100),
                WindSpeed = Random.Shared.Next(0, 20),
                Name = GenerateRandomName(),
                SnowmobileModel = snowmobileModels[Random.Shared.Next(snowmobileModels.Length)]
            }).ToArray();
    }

    private class SnowmobilingForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? SnowConditions { get; set; }
        public int SnowDepth { get; set; }
        public int WindSpeed { get; set; }
        public string Name { get; set; }
        public string SnowmobileModel { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private string GenerateRandomName()
    {
        var names = new[] { "John", "Emily", "Michael", "Jessica", "David", "Sarah" };
        return names[Random.Shared.Next(names.Length)];
    }
}



